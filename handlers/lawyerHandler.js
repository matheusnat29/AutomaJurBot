// handlers/lawyerHandler.js
import { Markup } from 'telegraf';
import { pushState, resetState, isInState } from '../utils/stateManager.js';
import { checkOAB } from '../scrapers/checkOAB.js';
import Advogado from '../database/models/Advogado.js';
import { initialMenu } from '../menu/initialMenu.js';

// Cache de resultados de OAB por usu√°rio (em mem√≥ria)
const oabResultsCache = new Map();

export function setupLawyerHandler(bot) {
  console.log('‚öôÔ∏è lawyerHandler carregado ‚úÖ');

  // inicia fluxo
  bot.action('register_lawyer', async (ctx) => {
    await ctx.answerCbQuery().catch(()=>{});
    pushState(ctx, 'awaiting_oab');
    try {
      await ctx.editMessageText(
        '‚úèÔ∏è Digite o n√∫mero da OAB para buscar o advogado:',
        Markup.inlineKeyboard([[Markup.button.callback('‚ùå Cancelar', 'cancel_register_lawyer')]])
      );
    } catch (err) {
      await ctx.reply(
        '‚úèÔ∏è Digite o n√∫mero da OAB para buscar o advogado:',
        Markup.inlineKeyboard([[Markup.button.callback('‚ùå Cancelar', 'cancel_register_lawyer')]])
      );
    }
  });

  bot.action('cancel_register_lawyer', async (ctx) => {
    await ctx.answerCbQuery().catch(()=>{});
    resetState(ctx);
    oabResultsCache.delete(ctx.from.id);
    await initialMenu(ctx, '‚ùå Cadastro cancelado.');
  });

  // captura texto (n√∫mero da OAB) apenas quando o usu√°rio estiver no estado correto
  bot.on('text', async (ctx, next) => {
    if (!isInState(ctx, 'awaiting_oab')) return next();

    const oabNumber = ctx.message.text.trim();
    if (!/^\d+$/.test(oabNumber)) {
      return ctx.reply('‚ö†Ô∏è O n√∫mero da OAB deve conter apenas d√≠gitos. Tente novamente:');
    }

    try {
      await ctx.reply(`‚è≥ Buscando dados para OAB ${oabNumber}...`);
      const results = await checkOAB(oabNumber);

      if (!results || results.length === 0) {
        return ctx.reply('‚ö†Ô∏è Nenhum advogado encontrado com esse n√∫mero. Verifique e tente novamente.');
      }

      // salvar no cache por usu√°rio
      oabResultsCache.set(ctx.from.id, results);

      // montar bot√µes com os mesmos campos que ser√£o salvos no DB (nome / oab)
      const buttons = results.map((adv, idx) => [
        Markup.button.callback(`${adv.nome} ‚Äî ${adv.oab}`, `select_lawyer_${idx}`)
      ]);

      await ctx.reply('üë®‚Äç‚öñÔ∏è Selecione o advogado encontrado:', Markup.inlineKeyboard(buttons));

    } catch (err) {
      console.error(`‚ùå Erro ao buscar OAB ${oabNumber}:`, err);
      ctx.reply('üö® Erro ao buscar dados no site da OAB. Tente novamente mais tarde.');
    }
  });

  // selecionar um dos resultados e salvar no banco
  bot.action(/select_lawyer_(\d+)/, async (ctx) => {
    await ctx.answerCbQuery().catch(()=>{});
    if (!isInState(ctx, 'awaiting_oab')) {
      return ctx.reply('‚ö†Ô∏è A sele√ß√£o de advogado n√£o est√° ativa no momento.');
    }

    const index = parseInt(ctx.match[1], 10);
    const selected = oabResultsCache.get(ctx.from.id)?.[index];

    if (!selected) {
      return ctx.reply('‚ö†Ô∏è O advogado selecionado n√£o foi encontrado na mem√≥ria. Tente novamente.');
    }

    try {
      const novoAdv = new Advogado({
        nome: selected.nome,
        oab: selected.oab,
        telegramId: ctx.from.id,
        email: ''
      });

      const saved = await novoAdv.save();
      console.log(`‚úÖ Advogado ${selected.nome} cadastrado para usu√°rio ${ctx.from.id}`);
      console.log('Advogado salvo no banco:', saved);

      // limpar estado/cache e voltar ao menu
      resetState(ctx);
      oabResultsCache.delete(ctx.from.id);

      await initialMenu(ctx, `‚úÖ Advogado ${selected.nome} cadastrado com sucesso!`);
    } catch (err) {
      console.error('‚ùå Erro ao salvar advogado:', err);
      ctx.reply('üö® Erro ao salvar o advogado no banco de dados.');
    }
  });
}
